#!/bin/bash
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

if [ ! -f /etc/scw-int-done-setup ]; then
    fallocate -l 4G /swap
    mkswap /swap
    chmod 0600 /swap
    swapon /swap
    echo "/swap none swap defaults 0 0" >>/etc/fstab

    SCWIP=$(hostname  -I | awk '{print $1}')
    SCWPUBLIC=$(curl https://v4.myip.ninja)
    MODEL=$(scw-metadata --cached COMMERCIAL_TYPE)
    DISCOVER=$(scw-metadata --cached TAGS_0 | sed 's/discover://g')
    ZONE=$(scw-metadata --cached TAGS_1 | sed 's/zone://g')
    CAURL=$(scw-metadata --cached TAGS_2 | sed 's/ca://g')
    ETCDAUTH=$(scw-metadata --cached TAGS_3 | sed 's/auth://g')
    IFS=':' read -r -a ETCDAUTHARRAY <<< "$ETCDAUTH"

    mkdir -p /etc/ssl/etcd/
    wget -O /etc/ssl/etcd/ca.pem $CAURL

    echo "private_ipv4="$SCWIP >>/etc/environment
    echo "public_ipv4="$SCWPUBLIC >>/etc/environment
    sed -i 's/$HOST/'$SCWPUBLIC'/g' /etc/systemd/system/etcd.service
    sed -i 's/$DISCOVER/'${DISCOVER//\//\\/}'/g' /etc/systemd/system/etcd.service


    if [[ $MODEL == "C1" ]]
    then
        sed -i 's/$armsupport/Environment=ETCD_UNSUPPORTED_ARCH=arm/g' /etc/systemd/system/etcd.service
    elif [[ $MODEL =~ ^ARM64 ]]
    then 
        sed -i 's/$armsupport/Environment=ETCD_UNSUPPORTED_ARCH=arm64/g' /etc/systemd/system/etcd.service
    else
        sed -i 's/$armsupport//g' /etc/systemd/system/etcd.service
    fi
    
    sed -i 's/$PUBIP/'$SCWPUBLIC'/g' /etc/systemd/system/dispatchd.service
    sed -i 's/$ZONE/'$ZONE'/g' /etc/systemd/system/dispatchd.service
    sed -i 's/$USER/'${ETCDAUTHARRAY[0]}'/g' /etc/systemd/system/dispatchd.service
    sed -i 's/$PASS/'${ETCDAUTHARRAY[1]}'/g' /etc/systemd/system/dispatchd.service

    touch /etc/scw-int-done-setup
    systemctl enable etcd && systemctl enable flannel && systemctl enable dispatchd
    reboot
fi

[ "$(lscpu | grep Architecture | awk '{print $2}')" == "x86_64" ] && modprobe aesni-intel || true 

exit 0
